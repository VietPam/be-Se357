// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email    String  @unique @db.VarChar(255)
  password String
  name     String
  isActive Boolean @default(true)
}

model Buyer {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String     @unique @db.VarChar(255)
  password     String
  name         String
  birthday     DateTime?
  gender       Gender?
  isActive     Boolean    @default(true)
  shoppingCart CartItem[]
  orders       Order[]
  addresses    String[]   @db.Text

  phones            String[]
  reviews           Review[]
  following         Buyer_Follow_Seller[]
  favouriteProducts Buyer_Like_Product[]
  createAt          DateTime              @default(now()) @ignore
}

model Buyer_Like_Product {
  buyer      Buyer    @relation(fields: [buyerId], references: [id])
  buyerId    String   @db.Uuid
  product    Product  @relation(fields: [productId], references: [id])
  productId  String   @db.Uuid
  assignedAt DateTime @default(now()) @ignore

  @@id([buyerId, productId])
}

model Buyer_Follow_Seller {
  buyer      Buyer    @relation(fields: [buyerId], references: [id])
  buyerId    String   @db.Uuid
  seller     Seller   @relation(fields: [sellerId], references: [id])
  sellerId   String   @db.Uuid
  assignedAt DateTime @default(now()) @ignore

  @@id([buyerId, sellerId])
}

model Seller {
  id        String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String                @unique @db.VarChar(255)
  password  String
  name      String
  isActive  Boolean               @default(true)
  products  Product[]
  orders    Order[]
  phones    String[]
  addresses String[]              @db.Text
  followers Buyer_Follow_Seller[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  buyer     Buyer   @relation(fields: [buyerId], references: [id])
  buyerId   String  @db.Uuid
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.Uuid
}

model Order {
  id        Int         @id @default(autoincrement())
  owner     Buyer       @relation(fields: [buyerId], references: [id])
  buyerId   String      @db.Uuid
  quantity  Int
  product   Product     @relation(fields: [productId], references: [id])
  productId String      @db.Uuid
  status    OrderStatus
  Seller    Seller      @relation(fields: [sellerId], references: [id])
  sellerId  String      @db.Uuid
  createAt  DateTime    @default(now()) @ignore
  updateAt  DateTime    @updatedAt @ignore
}

model Product {
  id         String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  images     String[]
  price      Int
  stock      Int
  saleOff    Int
  desciption String
  seller     Seller               @relation(fields: [sellerId], references: [id])
  sellerId   String               @db.Uuid
  category   Category
  status     ProductStatus
  cartItem   CartItem[]
  orderItem  Order[]
  reviews    Review[]
  options    ProductOption[]
  likers     Buyer_Like_Product[]
  createAt   DateTime             @default(now()) @ignore
  updateAt   DateTime             @updatedAt @ignore
}

model ProductOption {
  id        Int     @id @default(autoincrement()) @ignore
  option    String
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.Uuid
}

model Review {
  id        Int      @id @default(autoincrement()) @ignore
  product   Product  @relation(fields: [productID], references: [id])
  productID String   @db.Uuid
  Buyer     Buyer    @relation(fields: [buyerId], references: [id])
  buyerId   String   @db.Uuid
  rating    Int
  content   String
  createAt  DateTime @default(now()) @ignore
}

enum Category {
  SHOES
  CLOTH
  BOOK
  TOY
  FOOD
  ELECTRONIC
}

enum OrderStatus {
  PENDING
  CANCELED
  CONFIRMED
  SHIPPING
  ARRIVED
}

enum ProductStatus {
  PENDING
  VERIFIED
  REFUSED
  CANCELED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
