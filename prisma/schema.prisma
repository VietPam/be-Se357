// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid //protected,public
  email    String  @unique @db.VarChar(255) //protected,public
  password String //protected
  name     String //protected,public
  avatar   Bytes? //protected,public
  isActive Boolean @default(true)
}

model Buyer {
  id                String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid //protected,public
  email             String                @unique @db.VarChar(255) //protected,public
  password          String //protected
  name              String //protected,public
  avatar            Bytes? //protected,public
  birthday          DateTime? //protected
  gender            Gender? //protected
  isActive          Boolean               @default(true)
  shoppingCart      CartItem[] //skip
  orders            Order[] //skip
  addresses         String[] //protected
  phones            String[] //protected
  reviews           Review[] //skip
  following         Buyer_Follow_Seller[] //skip
  favouriteProducts Buyer_Like_Product[] //skip
  createAt          DateTime              @default(now())
}

model Buyer_Like_Product {
  buyer      Buyer    @relation(fields: [buyerId], references: [id])
  buyerId    String   @db.Uuid
  product    Product  @relation(fields: [productId], references: [id])
  productId  String   @db.Uuid
  assignedAt DateTime @default(now())
  @@id([buyerId, productId])
}

model Buyer_Follow_Seller {
  buyer    Buyer  @relation(fields: [buyerId], references: [id])
  buyerId  String @db.Uuid
  seller   Seller @relation(fields: [sellerId], references: [id])
  sellerId String @db.Uuid
  assignedAt DateTime @default(now())
  @@id([buyerId, sellerId])
}

model Seller {
  id        String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String                @unique @db.VarChar(255)
  password  String
  name      String
  avatar    Bytes? //protected,public
  isActive  Boolean               @default(false)
  bio       String?
  products  Product[]
  orders    Order[]
  phones    String[]
  addresses String[]
  followers Buyer_Follow_Seller[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  buyer     Buyer   @relation(fields: [buyerId], references: [id])
  buyerId   String  @db.Uuid
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.Uuid
}

model Order {
  id        Int         @id @default(autoincrement())
  owner     Buyer       @relation(fields: [buyerId], references: [id])
  buyerId   String      @db.Uuid
  quantity  Int
  product   Product     @relation(fields: [productId], references: [id])
  productId String      @db.Uuid
  status    OrderStatus @default(PENDING)
  Seller    Seller      @relation(fields: [sellerId], references: [id])
  sellerId  String      @db.Uuid
  createAt  DateTime    @default(now())
  updateAt  DateTime    @updatedAt
}

model Product {
  id         String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid //protected,public
  name       String //protected,public
  images     String[] //protected,public
  price      Int //protected,public
  stock      Int //protected
  saleOff    Int @default(0)//protected,public 
  desciption String //protected,public
  seller     Seller               @relation(fields: [sellerId], references: [id])
  sellerId   String               @db.Uuid //protected,public
  category   Category //protected,public
  status     ProductStatus @default(PENDING) //protected-->get only
  cartItem   CartItem[]
  orderItem  Order[]
  reviews    Review[]
  options    ProductOption[]//protected,public
  likers     Buyer_Like_Product[]
  createAt   DateTime             @default(now())
  updateAt   DateTime             @updatedAt
}

model ProductOption {
  id        Int     @id @default(autoincrement())
  option    String
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.Uuid
}

model Review {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.Uuid
  Buyer     Buyer    @relation(fields: [buyerId], references: [id])
  buyerId   String   @db.Uuid
  rating    Int
  content   String
  createAt  DateTime @default(now())
}

enum Category {
  SHOES
  CLOTH
  BOOK
  TOY
  FOOD
  ELECTRONIC
}

enum OrderStatus {
  PENDING
  CANCELED
  CONFIRMED
  SHIPPING
  ARRIVED
}

enum ProductStatus {
  PENDING
  VERIFIED
  REFUSED
  CANCELED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
